/***************************************************************************
                          wcurvedoc.h  -  description
                             -------------------
    begin                : Thu Feb 21 13:34:41 MST 2002
    copyright            : (C) 2002 by Joseph Ruscio
    email                : ruscjos@iit.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

#ifndef WCURVEDOC_H
#define WCURVEDOC_H

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif 

// include files for QT
#include <qobject.h>
#include <qstring.h>
#include <qlist.h>
#include <qtextstream.h>
#include <qfile.h>
#include <qstring.h>
#include <qlistview.h>
#include <qregexp.h>
#include "globaltypes.h"
#include "wcurvedata.h"
#include <vector>

using namespace std;

// forward declaration of the Wcurve and SequenceView classes
class WcurveView;
class SequenceView;

/**	WcurveDoc provides a document object for a document-view model.
  *
  * The WcurveDoc class provides a document object that can be used in conjunction with the classes
  * WcurveApp and WcurveView to create a document-view model for MDI (Multiple Document Interface)
  * Qt 2.1 applications based on QApplication and QMainWindow as main classes and QWorkspace as MDI manager widget.
  * Thereby, the document object is created by the WcurveApp instance (and kept in a document list) and contains
  * the document structure with the according methods for manipulating the document
  * data by WcurveView objects. Also, WcurveDoc contains the methods for serialization of the document data
  * from and to files.
  * @author Source Framework Automatically Generated by KDevelop, (c) The KDevelop Team. 	
  * @version KDevelop version 1.1 code generation
  */
class WcurveDoc : public QObject
{
  Q_OBJECT

  friend class WcurveView;

  public:
    /** Constructor for the fileclass of the application */
    WcurveDoc();
    /** Destructor for the fileclass of the application */
    ~WcurveDoc();

    /** adds a view to the document which represents the document contents. Usually this is your main view. */
    void addView(WcurveView *view);
    /** removes a view from the list of currently connected views */
    void removeView(WcurveView *view);
		/** gets called if a view is removed or added */
		void changedViewList();
    /** returns the first view instance */
		WcurveView* firstView(){ return pViewList->first(); };
		/** returns true, if the requested view is the last view of the document */
    bool isLastView();
    /** This method gets called when the user is about to close a frame window. It checks, if more than one view
    	* is connected to the document (then the frame can be closed), if pFrame is the last view and the document is
    	* modified, the user gets asked if he wants to save the document.
    	*/
		bool canCloseFrame(WcurveView* pFrame);
    /** sets the modified flag for the document after a modifying action on the view connected to the document.*/
    void setModified(bool _m=true){ modified=_m; };
    /** returns if the document is modified or not. Use this to determine if your document needs saving by the user on closing.*/
    bool isModified(){ return modified; };
    /** deletes the document's contents */
    void deleteContents();
    /** initializes the document generally */
    bool newDocument();
    /** closes the acutal document */
    bool closeDocument();
    /** loads the document by filename and format and emits the updateViews() signal */
    bool openDocument(const QString &filename, const char *format=0);
    /** saves the document under filename and format.*/	
    bool saveDocument(const QString &filename, WcurveView *v, const char *format=0);
    /** sets the path to the file connected with the document */
    void setPathName(const QString &name);
    /** returns the pathname of the current document file*/
    const QString& pathName() const;

    /** sets the filename of the document */
    void setTitle(const QString &title);
    /** returns the title of the document */
    const QString& title() const;
  /** gives access to a constant version of the genome sequence */
  vector<QChar>* getNucList();
  /** returns the number of nucleotides in the sequence */
  int nucCount();

  /** validates the modulus value and updates the wcurve */
  bool setModVal(int newModVal, bool propagate=true);
  /** validates the divisor and updates the wcurve to the new value */
  bool setKVal(int newKVal, bool propagate=true);
  /** validates the start nucleotide and updates the wcurve */                                
  bool setStartNuc(int start, bool propagate=true);
  /** changes the filter and updates the wcurve */
  void setFilter(bool new_filter[FILTER_SIZE], bool propagate=true);
 /** validates the end nucleotide and updates the wcurve */
  bool setEndNuc(int end, bool propagate=true);
  /** changes the z_increment value */
  void setZVal(int newZ, bool propagate=true);
  /** sets the gamma value of the sequenceparser */
  void setGammaVal(int newG, bool propagate=true);
  /** returns the view associated with the doc that matches the passed in key */
  WcurveView* view(int key);
  /** returns a copy of the model data for this document */
  WcurveData getModelData();
  /** trigger to have a WcurveDoc propagate its current state to its associated views */
  void propagate();
  /** returns k-value */
  int getKVal();
  /** returns gamma value */
  float getGammaVal();
  /** pSeqView modifier method */
  //void setSequenceView(SequenceView* seq_view);
	
  public slots:
    /** calls repaint() on all views connected to the document object and is called by the view by which the document has been changed.
     * As this view normally repaints itself, it is excluded from the paintEvent.
     */
    void updateAllViews(WcurveView *sender = NULL);
    /** calls updateGL() on all views connected to the document object. Called by the app*/
    void refreshAllViews();
 	
  private:
    /** the modified flag of the current document */
    bool modified;
    QString m_title;
    QString m_filename;
    /** the list of the views currently connected to the document */
    QList<WcurveView> *pViewList;	
    /** The genome squence that comprises this document */
    vector<QChar> *nucList;
    /** Contains all of the user configurable data relating to the w-curve algorithm  */
    WcurveData m_modelData;
    /** This is the view that displays the ASCII representation of the sequence. */
    //SequenceView *pSeqView;

private: // Private methods
  /** handles the opening of an .seq file */
  void parseSeqFile(const QString &filename);
  /** parses a *.wcv file */
  void parseWcvFile(const QString &filename);
  /** parses fasta format files */
  void parseFastaFile(const QString &filename);
  /** Part of the GOF Observer Pattern, informs all attached views that the model data has changed */
  void notify();
};

#endif // WCURVEDOC_H

